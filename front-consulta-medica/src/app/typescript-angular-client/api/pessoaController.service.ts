/**
 * API para marcação de consultas
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: kb.developer.br@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ObjectResponse } from '../model/objectResponse';
import { Pessoa } from '../model/pessoa';
import { PessoaBodyDto } from '../model/pessoaBodyDto';
import { UsuarioBodyDto } from '../model/usuarioBodyDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PessoaControllerService {

    protected basePath = 'http://localhost:8000/ws-consulta-medica';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * auth
     * 
     * @param usuario usuario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authUsingPOST(usuario: UsuarioBodyDto, observe?: 'body', reportProgress?: boolean): Observable<ObjectResponse>;
    public authUsingPOST(usuario: UsuarioBodyDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObjectResponse>>;
    public authUsingPOST(usuario: UsuarioBodyDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObjectResponse>>;
    public authUsingPOST(usuario: UsuarioBodyDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (usuario === null || usuario === undefined) {
            throw new Error('Required parameter usuario was null or undefined when calling authUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ObjectResponse>(`${this.basePath}/pessoa/login`,
            usuario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * create
     * 
     * @param pessoa pessoa
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUsingPOST(pessoa: PessoaBodyDto, observe?: 'body', reportProgress?: boolean): Observable<ObjectResponse>;
    public createUsingPOST(pessoa: PessoaBodyDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObjectResponse>>;
    public createUsingPOST(pessoa: PessoaBodyDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObjectResponse>>;
    public createUsingPOST(pessoa: PessoaBodyDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pessoa === null || pessoa === undefined) {
            throw new Error('Required parameter pessoa was null or undefined when calling createUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ObjectResponse>(`${this.basePath}/pessoa/signup`,
            pessoa,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteById
     * 
     * @param idPessoa idPessoa
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteByIdUsingDELETE(idPessoa: string, observe?: 'body', reportProgress?: boolean): Observable<ObjectResponse>;
    public deleteByIdUsingDELETE(idPessoa: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObjectResponse>>;
    public deleteByIdUsingDELETE(idPessoa: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObjectResponse>>;
    public deleteByIdUsingDELETE(idPessoa: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idPessoa === null || idPessoa === undefined) {
            throw new Error('Required parameter idPessoa was null or undefined when calling deleteByIdUsingDELETE.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idPessoa !== undefined && idPessoa !== null) {
            queryParameters = queryParameters.set('idPessoa', <any>idPessoa);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<ObjectResponse>(`${this.basePath}/pessoa/deleteOne`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * delete
     * 
     * @param pessoa pessoa
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUsingDELETE(pessoa: Pessoa, observe?: 'body', reportProgress?: boolean): Observable<ObjectResponse>;
    public deleteUsingDELETE(pessoa: Pessoa, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObjectResponse>>;
    public deleteUsingDELETE(pessoa: Pessoa, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObjectResponse>>;
    public deleteUsingDELETE(pessoa: Pessoa, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pessoa === null || pessoa === undefined) {
            throw new Error('Required parameter pessoa was null or undefined when calling deleteUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<ObjectResponse>(`${this.basePath}/pessoa/deleteEntity`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllPage
     * 
     * @param page page
     * @param size size
     * @param direction direction
     * @param sortProperty sortProperty
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllPageUsingGET(page?: number, size?: number, direction?: 'ASC' | 'DESC', sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<ObjectResponse>;
    public findAllPageUsingGET(page?: number, size?: number, direction?: 'ASC' | 'DESC', sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObjectResponse>>;
    public findAllPageUsingGET(page?: number, size?: number, direction?: 'ASC' | 'DESC', sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObjectResponse>>;
    public findAllPageUsingGET(page?: number, size?: number, direction?: 'ASC' | 'DESC', sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (sortProperty !== undefined && sortProperty !== null) {
            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ObjectResponse>(`${this.basePath}/pessoa/paginated`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAll
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ObjectResponse>;
    public findAllUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObjectResponse>>;
    public findAllUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObjectResponse>>;
    public findAllUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ObjectResponse>(`${this.basePath}/pessoa/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findOne
     * 
     * @param idPessoa idPessoa
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findOneUsingGET(idPessoa: string, observe?: 'body', reportProgress?: boolean): Observable<ObjectResponse>;
    public findOneUsingGET(idPessoa: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObjectResponse>>;
    public findOneUsingGET(idPessoa: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObjectResponse>>;
    public findOneUsingGET(idPessoa: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idPessoa === null || idPessoa === undefined) {
            throw new Error('Required parameter idPessoa was null or undefined when calling findOneUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idPessoa !== undefined && idPessoa !== null) {
            queryParameters = queryParameters.set('idPessoa', <any>idPessoa);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ObjectResponse>(`${this.basePath}/pessoa`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
